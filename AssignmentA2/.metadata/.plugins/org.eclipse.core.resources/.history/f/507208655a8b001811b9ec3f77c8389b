#include<iostream>
#include<vector>
#include<math.h>
using namespace std;
class HammingCodes
{
private:
	char a;
	int m;
	int r;
	vector<bool> rbitSet;
	vector<bool> bitSet;
	vector<bool> :: iterator i;
public:
	HammingCodes(){
		a = 'n';
		m = 0;
		r = 0;
	}
	void getInput(){
		cout<<"\nEnter a character to transfer: ";
		cin>>a;
		convertInput();
	}
	void convertInput(){
		int x = (int)a;
		int bit;
		while(x!=0)
		{
			if((int)x % 2 == 1){
				bit = 1;
			}
			else{
				bit = 0;
			}
			cout<<bit;
			x = x / 2;
			rbitSet.push_back(bit);
		}
		if(rbitSet.size() < 8){
			rbitSet.push_back(0);
		}
		cout<<"\nEntered BitSet is: ";


		for(i = rbitSet.end() - 1; i!=rbitSet.begin(); i--){
			bitSet.push_back(*i);
		}
		bitSet.push_back(*rbitSet.begin());
		m = bitSet.size();

		display();
		cout<<"\nCardinality of BitSet: ";
		cout<<m;
	}
	void redundantBits()
	{
		for(r = 0; r<10; r++){
			if(pow(2, r) >= m + r + 1){
				break;
			}
		}
		cout<<"\nNumber of Redundant Bits: "<<r;
		addRedundantBits();
	}
	void addRedundantBits(){

		for(int i = 0;i<r; i = pow(2,i)){
			bitSet.insert(bitSet.begin() + i, 0);
		}
		m = bitSet.size();
		display();
		bool p1, p2, p4;

		cout<<endl<<x;
	}
	void display(){
		for(i = bitSet.begin(); i!=bitSet.end(); i++){
			cout<<*i;
		}
	}

};
int main()
{
	HammingCodes hammingCodes;
	hammingCodes.getInput();
	hammingCodes.redundantBits();
}
